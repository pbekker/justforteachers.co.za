<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GoogleDrive.Text" xml:space="preserve">
    <value>Google Drive</value>
  </data>
  <data name="GoogleDriveAdvancedSettings.Text" xml:space="preserve">
    <value>Google Drive - Advanced Settings</value>
  </data>
  <data name="GoogleDriveBasicSettings.Text" xml:space="preserve">
    <value>Google Drive - Basic Settings</value>
  </data>
  <data name="GoogleDriveTestError.Text" xml:space="preserve">
    <value>Google Drive: &lt;br /&gt;{0}</value>
  </data>
  <data name="GoogleDriveTestOK.Text" xml:space="preserve">
    <value>Google Drive operation successfully completed.</value>
  </data>
  <data name="cmdRequestConnection.Text" xml:space="preserve">
    <value>Request Connection</value>
  </data>
  <data name="lblGoogleDriveClientId.Help" xml:space="preserve">
    <value>The Google Drive's "Client ID" you'll use to connect this web site.</value>
  </data>
  <data name="lblGoogleDriveClientId.Text" xml:space="preserve">
    <value>Client ID</value>
  </data>
  <data name="lblGoogleDriveInfo.Text" xml:space="preserve">
    <value>&lt;p&gt;Don't have a &lt;b&gt;Google&lt;/b&gt; account?  &lt;a  href="https://accounts.google.com/SignUp" target="_blank" class="CommandButton"&gt;Click here to create an account&lt;/a&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Once you have a Google account, you'll have to enable the Google Drive API, and create an 'API project' for this web site to connect to your Google Drive.&lt;/p&gt;

Notes:
&lt;ul&gt;
&lt;li&gt;Just items ('shared with me' or not, depending on the settings) found under the 'My Drive' root will be handled by this provider. Orphan items, or items found only under the 'Shared with me' root will be filtered out.&lt;li&gt;
&lt;li&gt;New items (files and folders) will inerith permissions from their parent folder. You can set permissions on your &lt;a href="https://drive.google.com/" target="_blank"&gt;Google Drive console &lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;How to generate a 'Client ID' and 'Client Secret'&lt;/b&gt;:&lt;/p&gt;
&lt;p&gt;First, you need to enable the Drive API for your app. You can do this in your app's API project in the Google APIs Console.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an API project in the &lt;a target="_blank" href="https://code.google.com/apis/console/"&gt;Google APIs
   Console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Services&lt;/strong&gt; tab in your API project, and enable the Drive API.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;API Access&lt;/strong&gt; tab in your API project, and click &lt;strong&gt;Create an
   OAuth 2.0 client ID&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Branding Information&lt;/strong&gt; section, provide a name for your application
   (e.g. "My example.com DNN Web Site"), and click &lt;strong&gt;Next&lt;/strong&gt;.  Providing a product
   logo is optional.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Client ID Settings&lt;/strong&gt; section, do the following:&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;Installed application&lt;/strong&gt; for the &lt;strong&gt;Application type&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Other&lt;/strong&gt; for the &lt;strong&gt;Installed application type&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create Client ID&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;API Access&lt;/strong&gt; page, locate the section &lt;strong&gt;Client ID for installed applications&lt;/strong&gt;
   and take note of the "Client ID" and "Client secret" that Google created for you.&lt;/li&gt;
&lt;li&gt;Set the "Client ID" and "Client secret" on this form, and save the Settings by clicking on the 'Update' link found on this page, and re-open this form (Click on the pencil for this Folder Type on the 'Folder Type Definitions' dialog) to continue with the authorization process.&lt;/li&gt;   
&lt;/ol&gt;

&lt;p&gt;Once you have your  'Client ID' and 'Client Secret' keys, you can connect this web site to your Google Drive account.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;How to connect this web site to Google Drive&lt;/b&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on the &lt;b&gt;'Request Connection'&lt;/b&gt; link.  A new window, on the Google's web site will be opened.&lt;/li&gt;
&lt;li&gt;If you are not already logged into your Google account, you will be prompted to log in.  If you are logged into multiple Google accounts, you will be asked to select one account to use for the authorization.&lt;/li&gt;
&lt;li&gt;Copy the  code you're given after browsing to the link, and paste it into the &lt;strong&gt;"Authorization code"&lt;/strong&gt; textbox.&lt;/li&gt;
&lt;li&gt;Click on the '&lt;b&gt;Establish Connection&lt;/b&gt;' link.&lt;/li&gt;
&lt;li&gt;Save the Settings by clicking on the 'Update' link.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;b&gt;How to disconnect this web site from Google Drive (how to disallow this web site from accessing your Google Drive account)&lt;/b&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the 'Clear Connection' link found on this page to remove the link between Google Drive and this web site.&lt;/li&gt;
&lt;li&gt;Go to the &lt;a href="https://code.google.com/apis/console/"&gt;Google APIs
   Console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Services&lt;/strong&gt; tab in your API project.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;API Access&lt;/strong&gt; tab in your API project, and click &lt;strong&gt;'Reset client secret...'&lt;/strong&gt;.&lt;br /&gt;Note: Optionally, can simply disable the Drive API.&lt;/li&gt;
&lt;/ol&gt;</value>
  </data>
  <data name="lblGoogleDriveIsDisabled.Help" xml:space="preserve">
    <value>You can use this setting to temporarily 'turn off' all access to the configured GoogleDrive account.</value>
  </data>
  <data name="lblGoogleDriveIsDisabled.Text" xml:space="preserve">
    <value>Disable</value>
  </data>
  <data name="lblGoogleDriveTest.Help" xml:space="preserve">
    <value>Click on the [Test] button to verify the configured settings.</value>
  </data>
  <data name="lblGoogleDriveTest.Text" xml:space="preserve">
    <value>Test Settings</value>
  </data>
  <data name="lblGoogleDriveUseSSL.Help" xml:space="preserve">
    <value>Use SSL (secure connection). Notice that this is not required to proctect your credentials. This setting will just make encrypted the data (like files upload/download) being transferred from the GoogleDrive.</value>
  </data>
  <data name="lblGoogleDriveUseSSL.Text" xml:space="preserve">
    <value>Use SSL</value>
  </data>
  <data name="lblGoogleDriveClientSecret.Help" xml:space="preserve">
    <value>The Google Drive's "Client secret" realated with the "Client ID".</value>
  </data>
  <data name="lblGoogleDriveClientSecret.Text" xml:space="preserve">
    <value>Client secret</value>
  </data>
  <data name="lblEnforceReadOnlyAccess.Help" xml:space="preserve">
    <value>Use this option to prevent any update on the Google Drive repository. &lt;br /&gt;
Files creation, update or rename requests will be ignored.&lt;br /&gt;
This setting is useful if you want to 'plug' a GoogleDrive repository you already have, ensuring that its content will not be updated in any way from the DotNetNuke site.</value>
  </data>
  <data name="lblEnforceReadOnlyAccess.Text" xml:space="preserve">
    <value>Enforce Ready Only Access</value>
  </data>
  <data name="lblInheritBucketACLs.Help" xml:space="preserve">
    <value>When enabled, objects created or updated from the DotNetNuke site will inherith the permissions (ACLs) set on the bucket. Otherwise the created/updated objects will have permissions for the &lt;b&gt;Bucket owner only&lt;/b&gt; (BucketOwnerFullControl).&lt;br /&gt;
You can use e.g. the &lt;a  target="_blank" class="CommandButton" href="https://console.aws.GoogleDrive.com/s3/home"&gt;AWS Management Console:&lt;/a&gt; to define the permissions you want for this bucket, make all the objects updated from the DotNetNuke site inherit these permissions.&lt;br /&gt;
For example, you may want to add 'Open/Download' permissions to everyone, and provide (or use yourself) the regular GoogleDrive's direct URL to access the files. See the "URLs Expiration" Setting on this same page.&lt;br /&gt;
Note: 'Inherit Bucket ACLs' will not affect permissions of files not created, updated or modified from the DotNetNuke site.</value>
  </data>
  <data name="lblInheritBucketACLs.Text" xml:space="preserve">
    <value>Inherit Bucket ACLs</value>
  </data>
  <data name="lblIsBucketRoot.Help" xml:space="preserve">
    <value>Enable this setting if you want to mimic an already running s3 bucket, and your root DotNetNuke folder is the bucket root.&lt;br /&gt;
For example, you create in DNN file manager a Portal_Root/MYS3FOLDER, and add a image.png file on it.&lt;br /&gt;
With this setting enabled,  MYS3FOLDER is assumed to be the s3 bucket root, and on the S3 bucket the file will be created as: /image.png.&lt;br /&gt;
If this setting is disabled, on the S3 bucket the file will be created as:  MYS3FOLDER/image.png&lt;br /&gt;
When this setting is disabled, you can safely combine different types of Folder Types and locate this S3 Folder as child of any folder.</value>
  </data>
  <data name="lblIsBucketRoot.Text" xml:space="preserve">
    <value>Is Bucket Root</value>
  </data>
  <data name="lblShowGoogleDriveInfo.Help" xml:space="preserve">
    <value>About Google Drive.</value>
  </data>
  <data name="lblShowGoogleDriveInfo.Text" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="MissingCredentials.Text" xml:space="preserve">
    <value>Please check the provided Google Drive Credentials. &lt;br /&gt;</value>
  </data>
  <data name="ShowGoogleDriveInfo.Text" xml:space="preserve">
    <value>Show / Hide</value>
  </data>
  <data name="valGoogleDriveClientId.ErrorMessage" xml:space="preserve">
    <value>Please type your Access Key ID.</value>
  </data>
  <data name="valGoogleDriveClientSecret.ErrorMessage" xml:space="preserve">
    <value>Please type your Secret Access Key.</value>
  </data>
  <data name="lblUrlExpireMinutes.Help" xml:space="preserve">
    <value>The system will generate expiring links to Google Drive. This value defines for how long the generated URLs will be valid. &lt;br /&gt;
Notice that the longer you make this period, the longer you are exposing the resource to an anauthorized access.&lt;br /&gt;
Sometimes, depending on your contents, you may want to make the resource available for direct access.&lt;br /&gt;&lt;br /&gt;
If you set this value to "-1", a non-expiring link will be generated. For this to work, you'll have to define in the file (e.g. by means of the AWS Managment Console) 'Open/Download' permissions for 'Everyone'. You can define this permission on the buket and enable the "Inherit Bucket ACLs" on this Settings page (Note: this setting will not affect objects already present on the Bucket).</value>
  </data>
  <data name="lblUrlExpireMinutes.Text" xml:space="preserve">
    <value>URLs Expiration (minutes)</value>
  </data>
  <data name="valUrlExpireMinutesRequired.ErrorMessage" xml:space="preserve">
    <value>Please type an expiration value for the generated URLs.</value>
  </data>
  <data name="valUrlExpireMinutesValue.ErrorMessage" xml:space="preserve">
    <value>The expiration needs to be an integer value.</value>
  </data>
  <data name="ConfigureLicenseFirst.Text" xml:space="preserve">
    <value>Your license is invalid, or not suitable for your current environment. &lt;br /&gt;
Without a license key, this product is fully functional on any 'localhost' or '*.local' site.&lt;br /&gt;
Please configure your License before setting up the GoogleDrive options.</value>
  </data>
  <data name="cmdEstablishConnection.Text" xml:space="preserve">
    <value>Establish Connection</value>
  </data>
  <data name="lblGoogleDriveConnectionStatus.Help" xml:space="preserve">
    <value>Tells if for the given "Client ID" and "Client secret", a connection with GoogleDrive has been already established or not.</value>
  </data>
  <data name="lblGoogleDriveConnectionStatus.Text" xml:space="preserve">
    <value>Connection Status</value>
  </data>
  <data name="ConnectionMissingClientIdAndSecret.Message" xml:space="preserve">
    <value>Please go to &lt;a href="https://code.google.com/apis/console/" target="_blank"&gt;https://code.google.com/apis/console/&lt;/a&gt; to enable the Drive API ("Services" Tab), and configure your 'Client ID' and 'Client Secret' ("API Access" Tab). Then, click on 'Update' (at the bottom of this page) and reload this form to continue with the authorization process.
&lt;br /&gt;&lt;br /&gt;

&lt;p&gt;&lt;b&gt;How to generate a 'Client ID' and 'Client Secret'&lt;/b&gt;:&lt;/p&gt;
&lt;p&gt;First, you need to enable the Drive API for your app. You can do this in your app's API project in the Google APIs Console.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an API project in the &lt;a target="_blank" href="https://code.google.com/apis/console/"&gt;Google APIs
   Console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Services&lt;/strong&gt; tab in your API project, and enable the Drive API.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;API Access&lt;/strong&gt; tab in your API project, and click &lt;strong&gt;Create an
   OAuth 2.0 client ID&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Branding Information&lt;/strong&gt; section, provide a name for your application
   (e.g. "My example.com DNN Web Site"), and click &lt;strong&gt;Next&lt;/strong&gt;.  Providing a product
   logo is optional.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Client ID Settings&lt;/strong&gt; section, do the following:&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;Installed application&lt;/strong&gt; for the &lt;strong&gt;Application type&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Other&lt;/strong&gt; for the &lt;strong&gt;Installed application type&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create Client ID&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;API Access&lt;/strong&gt; page, locate the section &lt;strong&gt;Client ID for installed applications&lt;/strong&gt;
   and take note of the "Client ID" and "Client secret" that Google created for you.&lt;/li&gt;


&lt;br /&gt;&lt;br /&gt;
Note: Expand 'Information' (clicking on 'Show / Hide') for complete information about the authorization process.</value>
  </data>
  <data name="GoogleDriveAuthorizationMessage.Text" xml:space="preserve">
    <value>&lt;h3&gt;Google Drive Configuration&lt;/h3&gt;
        &lt;p&gt;Next Steps:&lt;/p&gt;
        &lt;ul&gt;        
        &lt;li&gt;You can close this window.&lt;/li&gt;
        &lt;li&gt;Click on the '&lt;b&gt;Establish Connection&lt;/b&gt;' link found on the configuration page (that you should have already open).&lt;/li&gt;
        &lt;li&gt;Save the Settings just configured by clicking  on the '&lt;b&gt;Update&lt;/b&gt;' link found on the configuration page.&lt;/li&gt;
        &lt;/ul&gt;</value>
  </data>
  <data name="ConnectionMissing.Message" xml:space="preserve">
    <value>&lt;p&gt;Your web site is not yet connected to your Google Drive account. &lt;/p&gt;
&lt;p&gt;Important: Verify the &lt;b&gt;'Client ID' and 'Client secret'&lt;/b&gt; are right. If it is needed, update them and click on &lt;b&gt;'Update'&lt;/b&gt; to save their values before browsing back to this dialog and clicking on &lt;b&gt;'Request Connection'&lt;/b&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on the &lt;b&gt;'Request Connection'&lt;/b&gt; link.  A new window, on the Google's web site will be opened.&lt;/li&gt;
&lt;li&gt;If you are not already logged into your Google account, you will be prompted to log in.  If you are logged into multiple Google accounts, you will be asked to select one account to use for the authorization.&lt;/li&gt;
&lt;li&gt;A 'The app .... is requesting permission to: View and manage the files and documents in your Google Drive' dialog will be presented. Click on 'Allow Access'.&lt;/li&gt;
&lt;li&gt;The Google's page will be refreshed, and it will present a 'Please copy this code, switch to your application and paste it there' message along with an autorization code.&lt;/li&gt;
&lt;li&gt;Copy the  code you're given, and paste it into the &lt;strong&gt;"Authorization code"&lt;/strong&gt; textbox found on this page.&lt;/li&gt;
&lt;li&gt;Click on the '&lt;b&gt;Establish Connection&lt;/b&gt;' link found on this page.&lt;/li&gt;
&lt;li&gt;Save the Settings by clicking on the 'Update' link found on this page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: Expand 'Information' (clicking on 'Show / Hide') for complete information about the authorization process.&lt;/p&gt;</value>
  </data>
  <data name="ConnectionOK.Message" xml:space="preserve">
    <value>Established &lt;br /&gt;
{0} - {1} of {2} in use.</value>
  </data>
  <data name="lblEnablePublicUrls.Help" xml:space="preserve">
    <value>When enabled , even for objects in private folders a Google Drive link will be generated. For not-public objects, users will be able to access them if they are logged in at Google and have permissions to see the file.&lt;br /&gt;&lt;br /&gt;
You can manage your folder's "share" permissions (for individuals, organizations, or public access) from the &lt;a target="_blank" href="https://drive.google.com/"&gt;Google Drive main site&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;Note: 'Hide Files Location' takes precedence over this setting.</value>
  </data>
  <data name="lblEnablePublicUrls.Text" xml:space="preserve">
    <value>Prefer Google Drive URLs</value>
  </data>
  <data name="lblRootFolder.Help" xml:space="preserve">
    <value>You can choose any (&lt;b&gt;already created&lt;/b&gt;) public or private Google Drive folder to act as the root folder regarding the connection from this web site (or you can leave this setting blank to use the Google Drive root folder).&lt;br /&gt;&lt;br /&gt;
This allows you to provide a segmented view of your GoogleDrive space contents, instead of providing access to all the content.&lt;br /&gt;&lt;br /&gt;
Let's say you have lots of folders on your account, and you want to access from this web site just a specific folders tree, not everything.&lt;br /&gt;&lt;br /&gt;
Example 1: myfolder/mysubfolder&lt;br /&gt;
Example 2: MyWebSite/&lt;br /&gt;
etc.&lt;br /&gt;
Note: you should type the folders path with the same 'case' as they are in Google Drive.</value>
  </data>
  <data name="lblRootFolder.Text" xml:space="preserve">
    <value>Root Folder</value>
  </data>
  <data name="cmdClearConnection.Text" xml:space="preserve">
    <value>Clear Connection</value>
  </data>
  <data name="cmdClearConnection.Message" xml:space="preserve">
    <value>Please remember to click on "Update" to confirm the drop action.   Note: To really drop the connection, you must unauthorize the Application from your Google  account.</value>
  </data>
  <data name="lblHideFilesLocation.Help" xml:space="preserve">
    <value>Regardless of the Folder's accessibility (public/shared, or private), , the files will be like served directly from your web site (not linked from their real location). </value>
  </data>
  <data name="lblHideFilesLocation.Text" xml:space="preserve">
    <value>Hide Files Location</value>
  </data>
  <data name="CannotEstablishConnection.Text" xml:space="preserve">
    <value>The connection to GoogleDrive could not be established.&lt;br /&gt;&lt;br /&gt;
&lt;b&gt;Important&lt;/b&gt;: Please verify the &lt;b&gt;'Client ID' and 'Client secret'&lt;/b&gt; are right. If it is needed, udate them and click on &lt;b&gt;'Update'&lt;/b&gt; to save their values before browsing back to this dialog and clicking on &lt;b&gt;'Request Connection'&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;
Error: </value>
  </data>
  <data name="CannotGetAuthorizationURL.Text" xml:space="preserve">
    <value>The Authorization URL could not be generated. Please verify the GoogleDrive application was created, and the provided Client ID and Secret are valid. Error: </value>
  </data>
  <data name="MappingNotUnique.ErrorMessage" xml:space="preserve">
    <value>There is already a mapping featuring the same key settings.</value>
  </data>
  <data name="valGoogleDriveAuthorizationCode.ErrorMessage" xml:space="preserve">
    <value>Please type your Authorization Token.</value>
  </data>
  <data name="AuthorizationCodeMissing.Text" xml:space="preserve">
    <value>&lt;b&gt;The Authorization Code is missing. Use the 'Request Connection' link to get it.&lt;/b&gt;</value>
  </data>
  <data name="lblGoogleDriveAuthorizationCode.Help" xml:space="preserve">
    <value>During the authorization process, Google will generate this code for you. Once it is given to you, it should be pasted here.</value>
  </data>
  <data name="lblGoogleDriveAuthorizationCode.Text" xml:space="preserve">
    <value>Authorization Code</value>
  </data>
  <data name="lblGoogleDriveDeleteToTrash.Help" xml:space="preserve">
    <value>Deleted files or folders will be moved to the 'Trash' folder instead of be physically deleted.</value>
  </data>
  <data name="lblGoogleDriveDeleteToTrash.Text" xml:space="preserve">
    <value>Delete to Trash</value>
  </data>
  <data name="lblGoogleDriveIncludeSubscribed.Help" xml:space="preserve">
    <value>Include items 'shared with me'.</value>
  </data>
  <data name="lblGoogleDriveIncludeSubscribed.Text" xml:space="preserve">
    <value>Include Subscribed</value>
  </data>
  <data name="lblGoogleDriveKeepRevisions.Help" xml:space="preserve">
    <value>When uppdating a file, Google will keep track of the older versions (revisions).</value>
  </data>
  <data name="lblGoogleDriveKeepRevisions.Text" xml:space="preserve">
    <value>Keep Revisions</value>
  </data>
  <data name="lblGoogleDrivePreferredExportFormats.Help" xml:space="preserve">
    <value>A comma separated values of preferred export formats for native Google Docs.&lt;br /&gt;
The system will choose the first one on the list that is suitable for the content being retrieved from Google Drive.&lt;br /&gt;&lt;br /&gt;

You can find an up to date list of the available formats for each kind of document in the &lt;a target="_blank" href="https://developers.google.com/drive/manage-downloads#downloading_google_documents"&gt;Downloading Google Documents&lt;/a&gt; Google's documentation page.</value>
  </data>
  <data name="lblGoogleDrivePreferredExportFormats.Text" xml:space="preserve">
    <value>Preferred Export Formats</value>
  </data>
  <data name="cmdClearDataCache.Text" xml:space="preserve">
    <value>Clear Cache</value>
  </data>
  <data name="lblClearDataCache.Help" xml:space="preserve">
    <value>To improve the performance of the provider, DNNGlobalStorage cache(for a short period of time) the remote data structure. &lt;br /&gt;&lt;br /&gt;

If you make a change directly in the remote storage (not from the DNN site), and very quickly perform a 'Sinchonize' operations, it could be the new file(s) are not yet visible. In this case, you can use this option to force the cache to be cleared up.</value>
  </data>
  <data name="lblClearDataCache.Text" xml:space="preserve">
    <value>Clear Data Cache</value>
  </data>
</root>