<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Azure.Text" xml:space="preserve">
    <value>Windows Azure</value>
  </data>
  <data name="AzureAdvancedSettings.Text" xml:space="preserve">
    <value>Windows Azure - Advanced Settings</value>
  </data>
  <data name="AzureBasicSettings.Text" xml:space="preserve">
    <value>Windows Azure - Basic Settings</value>
  </data>
  <data name="AzureTestError.Text" xml:space="preserve">
    <value>Windows Azure: &lt;br /&gt;{0}</value>
  </data>
  <data name="AzureTestOK.Text" xml:space="preserve">
    <value>Windows Azure operation successfully completed.</value>
  </data>
  <data name="cmdCancelNewContainer.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="cmdNewContainer.Text" xml:space="preserve">
    <value>Create New Container</value>
  </data>
  <data name="cmdRefreshContainers.Text" xml:space="preserve">
    <value>Refresh Containers List.</value>
  </data>
  <data name="cmdSaveContainer.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="lblAzureAccountName.Help" xml:space="preserve">
    <value>Your Windows Azure Storage's Account Name.</value>
  </data>
  <data name="lblAzureAccountName.Text" xml:space="preserve">
    <value>Account Name</value>
  </data>
  <data name="lblAzureContainerName.Help" xml:space="preserve">
    <value>It is a container for objects stored in Windows Azure Storage.</value>
  </data>
  <data name="lblAzureContainerName.Text" xml:space="preserve">
    <value>Container Name</value>
  </data>
  <data name="AccessPrivate.Text" xml:space="preserve">
    <value>Private</value>
  </data>
  <data name="AccessPublicBlob.Text" xml:space="preserve">
    <value>Public Files</value>
  </data>
  <data name="AccessPublicContainer.Text" xml:space="preserve">
    <value>Public Container</value>
  </data>
  <data name="lblAzureContainerAccessibility.Help" xml:space="preserve">
    <value>Container Accessibility:&lt;br /&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;b&gt;Private&lt;/b&gt; (No public read access): The container and the files within it can be read by the account owner only.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
        
&lt;li&gt;&lt;b&gt;Public Files&lt;/b&gt; (Public read access for blobs only): Files within this container can be read via anonymous request, but container data is not available. Clients cannot enumerate files within the container via anonymous request.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;

        &lt;li&gt;&lt;b&gt;Public Container&lt;/b&gt; (Full public read access): The container and the files within it can be read via anonymous request. Clients can enumerate files within the container via anonymous request, but cannot enumerate containers within the storage account.&lt;/li&gt;
        &lt;/ul&gt;
      </value>
  </data>
  <data name="lblAzureContainerAccessibility.Text" xml:space="preserve">
    <value>Accessibility</value>
  </data>
  <data name="lblAzureInfo.Text" xml:space="preserve">
    <value>&lt;ul&gt;

&lt;li&gt;&lt;a href="http://www.evotiva.com/Products/DNNGlobalStorage.aspx" target="_blank" class="CommandButton"&gt;DNNGlobalStorage&lt;/a&gt; can be connected to one or many Windows Azure Storge Accounts. In other words, concerning DNNGlobalStorage, and regarding all the services provided under the 'Windows Azure' name, you just need a 'Storage Account'.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;Don't have an &lt;b&gt;Windows Azure Storage&lt;/b&gt; account?  &lt;a  href="http://www.microsoft.com/windowsazure/" target="_blank" class="CommandButton"&gt;Click here to create an account&lt;/a&gt;, and &lt;a href="http://msdn.microsoft.com/en-us/library/windowsazure/gg433066.aspx" target="_blank" &gt;click here to learn about How to Create a Storage Account for a Windows Azure Subscription&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;
&lt;/li&gt;

&lt;li&gt;You can manage your account at &lt;a href="https://windows.azure.com/default.aspx" target="_blank" class="CommandButton"&gt;https://windows.azure.com/default.aspx&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;
&lt;/li&gt;

&lt;li&gt;Once you have created a '&lt;b&gt;Storage account&lt;/b&gt;' within you '&lt;b&gt;Azure Subscription&lt;/b&gt;', you can start creating '&lt;b&gt;Containers&lt;/b&gt;', which will hold your files (a.k.a '&lt;b&gt;Blobs&lt;/b&gt;').&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;From any Windows Azure GUI front-end application (like the &lt;a target="_blank" class="CommandButton" href="http://azurestorageexplorer.codeplex.com/"&gt;Azure Storage Explorer&lt;/a&gt;, or &lt;a  target="_blank" class="CommandButton" href="http://www.cloudberrylab.com/free-microsoft-azure-explorer.aspx"&gt;CloudBerry Explorer for Azure&lt;/a&gt;), you can create/configure/manage your containers, permissions, files, and other settings.&lt;br /&gt;&lt;br /&gt;
&lt;/li&gt;

&lt;/ul&gt;</value>
  </data>
  <data name="lblAzureCustomDomainName.Help" xml:space="preserve">
    <value>If you have configured a custom domain for a Windows Azure storage account, you can specify it here (e.g. mystorage.example.com). The URLs will be generated according to this CNAME.&lt;br /&gt;&lt;br /&gt;
For more information, please visit '&lt;a href="http://msdn.microsoft.com/en-us/library/ee795179.aspx" target="_blank"&gt;How to Register a Custom Subdomain Name for Accessing Blobs in Windows Azure&lt;/a&gt;'.





</value>
  </data>
  <data name="lblAzureCustomDomainName.Text" xml:space="preserve">
    <value>Custom Domain Name</value>
  </data>
  <data name="lblAzureIsDisabled.Help" xml:space="preserve">
    <value>You can use this setting to temporarily 'turn off' all access to the configured Windows Azure Container.</value>
  </data>
  <data name="lblAzureIsDisabled.Text" xml:space="preserve">
    <value>Disable</value>
  </data>
  <data name="lblAzureTest.Help" xml:space="preserve">
    <value>Click on the [Test] button to verify the configured settings.</value>
  </data>
  <data name="lblAzureTest.Text" xml:space="preserve">
    <value>Test Settings</value>
  </data>
  <data name="lblAzureUseSSL.Help" xml:space="preserve">
    <value>Use SSL (secure connection).</value>
  </data>
  <data name="lblAzureUseSSL.Text" xml:space="preserve">
    <value>Use SSL</value>
  </data>
  <data name="lblAzureAccessKey.Help" xml:space="preserve">
    <value>Your Windows Azures's primary or secondary Access Key Access Key. For your protection, you should never share it with anyone.</value>
  </data>
  <data name="lblAzureAccessKey.Text" xml:space="preserve">
    <value>Access Key</value>
  </data>
  <data name="lblEnforceReadOnlyAccess.Help" xml:space="preserve">
    <value>Use this option to prevent any update on the Windows Azure repository. &lt;br /&gt;
Files creation, update or rename requests will be ignored.&lt;br /&gt;
This setting is useful if you want to 'plug' a Windows Azure repository you already have, ensuring that its content will not be updated in any way from the DotNetNuke site.</value>
  </data>
  <data name="lblEnforceReadOnlyAccess.Text" xml:space="preserve">
    <value>Enforce Ready Only Access</value>
  </data>
  <data name="lblShowAzureInfo.Help" xml:space="preserve">
    <value>About Windows Azure Storage.</value>
  </data>
  <data name="lblShowAzureInfo.Text" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="lblAzureUseDevelopmentStorage.Help" xml:space="preserve">
    <value>You don’t actually need a Windows Azure account before beginning development on an application. Of course you will need to Initialize your Development Storage Service on your development machine before you get going.</value>
  </data>
  <data name="lblAzureUseDevelopmentStorage.Text" xml:space="preserve">
    <value>Use Development Storage</value>
  </data>
  <data name="MissingCredentials.Text" xml:space="preserve">
    <value>Please check the provided Windows Azure Storage Credentials. &lt;br /&gt;If you haven't signed up for Windows Azure, please visit http://www.microsoft.com/windowsazure.</value>
  </data>
  <data name="MissingOrInvalidNewContainerName.Text" xml:space="preserve">
    <value>Please type a valid name for the new Container (see the help for details).</value>
  </data>
  <data name="ShowAzureInfo.Text" xml:space="preserve">
    <value>Show / Hide</value>
  </data>
  <data name="valAzureAccountName.ErrorMessage" xml:space="preserve">
    <value>Please type your Account Name.</value>
  </data>
  <data name="valAzureContainerName.ErrorMessage" xml:space="preserve">
    <value>Please select a Container. &lt;br /&gt;You can click on 'Create New Container' to add a new one.</value>
  </data>
  <data name="valAzureAccessKey.ErrorMessage" xml:space="preserve">
    <value>Please type your Access Key.</value>
  </data>
  <data name="lblUrlExpireMinutes.Help" xml:space="preserve">
    <value>For files (Blobs) on private Containers, the system will generate expiring links for them. This value defines for 
    how long the generated URLs will be valid. &lt;br /&gt;
Notice that the longer you make this period, the longer you are exposing the resource to an anauthorized access.&lt;br /&gt;
For not-private Containers, unsigned regular (public) URLs will be generated.&lt;br /&gt;&lt;br /&gt;
If you set this value to "-1" (disabled), it will be the same effect as enabling the 'Hide Files Location' setting. In this case, regardless of the Container's Accessibility setting, the resource will be like downloaded (not linked). 
It would be more efficient to generate a signed (protected / expiring) URL, but you may want to use this option to completelly hide the file's location.</value>
  </data>
  <data name="lblUrlExpireMinutes.Text" xml:space="preserve">
    <value>URLs Expiration (minutes)</value>
  </data>
  <data name="valUrlExpireMinutesRequired.ErrorMessage" xml:space="preserve">
    <value>Please type an expiration value for the generated URLs.</value>
  </data>
  <data name="valUrlExpireMinutesValue.ErrorMessage" xml:space="preserve">
    <value>The expiration needs to be an integer value.</value>
  </data>
  <data name="ConfigureLicenseFirst.Text" xml:space="preserve">
    <value>Your license is invalid, or not suitable for your current environment. &lt;br /&gt;
Without a license key, this product is fully functional on any 'localhost' or '*.local' site.&lt;br /&gt;
Please configure your License before setting up the Windows Azure options.</value>
  </data>
  <data name="lblRootFolder.Help" xml:space="preserve">
    <value>You can choose any (&lt;b&gt;already created&lt;/b&gt;) Windows Azure folder to act as the root folder regarding the connection from this web site.&lt;br /&gt;&lt;br /&gt;
This allows you to provide a segmented view of your Windows Azure Container, instead of providing access to all its content.&lt;br /&gt;&lt;br /&gt;
Let's say you have lots of folders on your Container, and you want to access from this web site just a specific folders tree, not everything.&lt;br /&gt;&lt;br /&gt;
Example 1: myfolder&lt;br /&gt;
Example 2: myfolder/mysubfolder&lt;br /&gt;
etc.&lt;br /&gt;
Note: you should type the folders path with the same 'case' as they are in Windows Azure.</value>
  </data>
  <data name="lblRootFolder.Text" xml:space="preserve">
    <value>Root Folder</value>
  </data>
  <data name="lblNewContainerName.Help" xml:space="preserve">
    <value>Container names must be 3-63 characters in lenght and may contain lower-case alphanumeric characters and dashes. Dashes must be preceded and followed by an alphanumeric character.</value>
  </data>
  <data name="lblNewContainerName.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="valAzureCustomDomainName.ErrorMessage" xml:space="preserve">
    <value>Please verify you have specified a valid domain name.</value>
  </data>
  <data name="valAzureContainerNameInvalid.ErrorMessage" xml:space="preserve">
    <value>Please review you have typed a valid container name (see the help for details).</value>
  </data>
  <data name="lblHideFilesLocation.Help" xml:space="preserve">
    <value>Regardless of the Container's Accessibility setting, the files will be like served directly from your web site (not linked from their real location). 
It would be more efficient to generate a signed (protected / expiring) URL, but you may want to use this option to completelly hide the file's location.</value>
  </data>
  <data name="lblHideFilesLocation.Text" xml:space="preserve">
    <value>Hide Files Location</value>
  </data>
  <data name="MappingNotUnique.ErrorMessage" xml:space="preserve">
    <value>There is already a mapping featuring the same key settings.</value>
  </data>
</root>