if '{objectQualifier}' <> ''
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsNewTags]') AND type in (N'U'))
	BEGIN
		IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsNewTags]') AND type in (N'U'))
		BEGIN
			EXECUTE sp_rename N'{databaseOwner}[EasyDNNNewsNewTags]', N'{objectQualifier}EasyDNNNewsNewTags', 'OBJECT'
			BEGIN TRY
			EXECUTE sp_rename N'PK_EasyDNNNewsItemTags', N'PK_{objectQualifier}EasyDNNNewsItemTags', 'OBJECT'
			EXECUTE sp_rename N'IX_EasyDNNNewsItemTags', N'IX_{objectQualifier}EasyDNNNewsItemTags', 'OBJECT'
			EXECUTE sp_rename N'DF_EasyDNNNewsNewTags_DateCreated', N'DF_{objectQualifier}EasyDNNNewsNewTags_DateCreated', 'OBJECT'
			END TRY
			BEGIN CATCH
			END CATCH
		END
	END
END TRY
BEGIN CATCH
END CATCH
GO

/******  UserDefinedFunction {databaseOwner}[{objectQualifier}EDS_StringListToTable]	******/
/******  Table {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] ******/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID](
	[FilterModuleID] [int] NOT NULL,
	[TagID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsFilterByTagID] PRIMARY KEY CLUSTERED  ([FilterModuleID] ASC,[TagID] ASC )WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[FK_{objectQualifier}EasyDNNNewsFilterByTagID_EasyDNNNewsNewTags]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsFilterByTagID_EasyDNNNewsNewTags] FOREIGN KEY([TagID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsNewTags] ([TagID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[FK_{objectQualifier}EasyDNNNewsFilterByTagID_EasyDNNNewsNewTags]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsFilterByTagID_EasyDNNNewsNewTags]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[FK_{objectQualifier}EasyDNNNewsFilterByTagID_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsFilterByTagID_Modules] FOREIGN KEY([FilterModuleID])
REFERENCES {databaseOwner}{objectQualifier}Modules ([ModuleID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[FK_{objectQualifier}EasyDNNNewsFilterByTagID_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsFilterByTagID_Modules]
GO

if '{objectQualifier}' <> ''
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings]') AND type in (N'U'))
	BEGIN
		IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsPortalSettings]') AND type in (N'U'))
		BEGIN
			EXECUTE sp_rename N'{databaseOwner}[EasyDNNNewsPortalSettings]', N'{objectQualifier}EasyDNNNewsPortalSettings', 'OBJECT'
			BEGIN TRY
			EXECUTE sp_rename N'PK_EasyDNNNewsPortalSettings', N'PK_{objectQualifier}EasyDNNNewsPortalSettings', 'OBJECT'
			EXECUTE sp_rename N'FK_EasyDNNNewsPortalSettings_Portals', N'FK_{objectQualifier}EasyDNNNewsPortalSettings_Portals', 'OBJECT'
			END TRY
			BEGIN CATCH
			END CATCH
		END
	END
END TRY
BEGIN CATCH
END CATCH
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'IsSocialInstance')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD IsSocialInstance bit NOT NULL DEFAULT(0)
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'PageTitleTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD PageTitleTemplate nvarchar(150) NOT NULL DEFAULT(N'def')
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'TitleItemSeparator')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD TitleItemSeparator nvarchar(5) NOT NULL DEFAULT(N'-')
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'ModuleToOpenTwitterDetails')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD ModuleToOpenTwitterDetails int NOT NULL DEFAULT(0)
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'ModuleToOpenFacebookDetails')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD ModuleToOpenFacebookDetails int NOT NULL DEFAULT(0)
END
GO

if '{objectQualifier}' <> ''
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings]') AND type in (N'U'))
	BEGIN
		IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsModuleSettings]') AND type in (N'U'))
		BEGIN
			EXECUTE sp_rename N'{databaseOwner}[EasyDNNNewsModuleSettings]', N'{objectQualifier}EasyDNNNewsModuleSettings', 'OBJECT'
			BEGIN TRY
			EXECUTE sp_rename N'PK_EasyDNNNewsModuleSettings', N'PK_{objectQualifier}EasyDNNNewsModuleSettings', 'OBJECT'
			EXECUTE sp_rename N'IX_EasyDNNNewsModuleSettings', N'IX_{objectQualifier}EasyDNNNewsModuleSettings', 'OBJECT'
			EXECUTE sp_rename N'FK_EasyDNNNewsModuleSettings_Modules', N'FK_{objectQualifier}EasyDNNNewsModuleSettings_Modules', 'OBJECT'
			EXECUTE sp_rename N'FK_EasyDNNNewsModuleSettings_Portals', N'FK_{objectQualifier}EasyDNNNewsModuleSettings_Portals', 'OBJECT'
			END TRY
			BEGIN CATCH
			END CATCH
		END
	END
END TRY
BEGIN CATCH
END CATCH
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'IsSocialInstance')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD IsSocialInstance bit NOT NULL DEFAULT(0)
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'ModuleToOpenTwitterDetails')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD ModuleToOpenTwitterDetails int NOT NULL DEFAULT(0)
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'ModuleToOpenFacebookDetails')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD ModuleToOpenFacebookDetails int NOT NULL DEFAULT(0)
END
GO

if '{objectQualifier}' <> ''
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsSocialSharingTemp]') AND type in (N'U'))
	BEGIN
		IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsSocialSharingTemp]') AND type in (N'U'))
		BEGIN
			EXECUTE sp_rename N'{databaseOwner}[EasyDNNNewsSocialSharingTemp]', N'{objectQualifier}EasyDNNNewsSocialSharingTemp', 'OBJECT'
			BEGIN TRY
			EXECUTE sp_rename N'PK_EasyDNNNewsSocialSharingTemp', N'PK_{objectQualifier}EasyDNNNewsSocialSharingTemp', 'OBJECT'
			EXECUTE sp_rename N'FK_EasyDNNNewsSocialSharingTemp_EasyDNNNews', N'FK_{objectQualifier}EasyDNNNewsSocialSharingTemp_EasyDNNNews', 'OBJECT'
			EXECUTE sp_rename N'FK_EasyDNNNewsSocialSharingTemp_Modules', N'FK_{objectQualifier}EasyDNNNewsSocialSharingTemp_Modules', 'OBJECT'
			EXECUTE sp_rename N'FK_EasyDNNNewsSocialSharingTemp_Roles', N'FK_{objectQualifier}EasyDNNNewsSocialSharingTemp_Roles', 'OBJECT'
			END TRY
			BEGIN CATCH
			END CATCH
		END
	END
END TRY
BEGIN CATCH
END CATCH
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsSocialSharingTemp' and column_name = 'SocialUserID')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSharingTemp] ADD SocialUserID int NOT NULL DEFAULT(0)
END
GO

if '{objectQualifier}' <> ''
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNews]') AND type in (N'U'))
	BEGIN
		IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNews]') AND type in (N'U'))
		BEGIN
			EXECUTE sp_rename N'{databaseOwner}[EasyDNNNews]', N'{objectQualifier}EasyDNNNews', 'OBJECT'
			BEGIN TRY
			EXECUTE sp_rename N'PK_EasyDNNNews', N'PK_{objectQualifier}EasyDNNNews', 'OBJECT'
			END TRY
			BEGIN CATCH
			END CATCH
		END
	END
END TRY
BEGIN CATCH
END CATCH
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'AuthorAliasName')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD AuthorAliasName nvarchar(100) NULL 
END
GO

if '{objectQualifier}' <> ''
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]') AND type in (N'U'))
	BEGIN
		IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsRSSFeedImport]') AND type in (N'U'))
		BEGIN
			EXECUTE sp_rename N'{databaseOwner}[EasyDNNNewsRSSFeedImport]', N'{objectQualifier}EasyDNNNewsRSSFeedImport', 'OBJECT'
			BEGIN TRY
			EXECUTE sp_rename N'PK_EasyDNNNewsRSSFeedImport', N'PK_{objectQualifier}EasyDNNNewsRSSFeedImport', 'OBJECT'
			END TRY
			BEGIN CATCH
			END CATCH
		END
	END
END TRY
BEGIN CATCH
END CATCH
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsRSSFeedImport' and column_name = 'SummaryLimit')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport] ADD SummaryLimit int NOT NULL DEFAULT(0)
END
GO

if '{objectQualifier}' <> ''
BEGIN TRY
	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization]') AND type in (N'U'))
	BEGIN
		IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsContentLocalization]') AND type in (N'U'))
		BEGIN
			EXECUTE sp_rename N'{databaseOwner}[EasyDNNNewsContentLocalization]', N'{objectQualifier}EasyDNNNewsContentLocalization', 'OBJECT'
			BEGIN TRY
			EXECUTE sp_rename N'PK_EasyDNNNewsContentLocalization', N'PK_{objectQualifier}EasyDNNNewsContentLocalization', 'OBJECT'
			EXECUTE sp_rename N'FK_EasyDNNNewsContentLocalization_EasyDNNNews', N'FK_{objectQualifier}EasyDNNNewsContentLocalization_EasyDNNNews', 'OBJECT'
			END TRY
			BEGIN CATCH
			END CATCH
		END
	END
END TRY
BEGIN CATCH
END CATCH
GO

IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsContentLocalization' and column_name = 'SubTitle')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] ALTER Column SubTitle nvarchar(4000)
END
GO

IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsContentLocalization' and column_name = 'Summary')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] ALTER Column Summary nvarchar(4000)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EDS_StringListToTable]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
	drop function {databaseOwner}[{objectQualifier}EDS_StringListToTable]
END
execute dbo.sp_executesql @statement = N'CREATE FUNCTION {databaseOwner}[{objectQualifier}EDS_StringListToTable]
(  
	@List	nvarchar(max)
) 
RETURNS @TableOfValues TABLE 
(  
	CategoryID	int	not null primary key
) 
AS 
	BEGIN
		DECLARE @CategoryID varchar(10), @Pos int
		SET @List = LTRIM(RTRIM(@List))+ '',''
		SET @Pos = CHARINDEX('','', @List, 1)
		IF REPLACE(@List, '','', '''') <> ''''
			BEGIN
				WHILE @Pos > 0
				BEGIN
					SET @CategoryID = LTRIM(RTRIM(LEFT(@List, @Pos - 1)))
					IF @CategoryID <> ''''
						BEGIN
							INSERT INTO @TableOfValues (CategoryID) VALUES (CAST(@CategoryID AS int))
						END
					SET @List = RIGHT(@List, LEN(@List) - @Pos)
					SET @Pos = CHARINDEX('','', @List, 1)
				END
			END	
	RETURN
	END'