<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Addarticle.Text" xml:space="preserve">
    <value>Add article</value>
  </data>
  <data name="ApproveArticleBody.Text" xml:space="preserve">
    <value>&lt;p&gt;You need to approve article: &lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;[EasyDNNnews:ArticleTitle]&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="ApproveArticleSubject.Text" xml:space="preserve">
    <value>Article needs approval</value>
  </data>
  <data name="ApproveCommentBody.Text" xml:space="preserve">
    <value>&lt;p&gt;You need to approve comment on article: &lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;[EasyDNNnews:ArticleTitle]&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="Approvecomments.Text" xml:space="preserve">
    <value>Approve comments</value>
  </data>
  <data name="ApproveCommentSubject.Text" xml:space="preserve">
    <value>Comment needs approval</value>
  </data>
  <data name="ArticleApprovedBody.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;Link to article&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="ArticleApprovedSubject.Text" xml:space="preserve">
    <value>Your article has been approved.</value>
  </data>
  <data name="Articleeditor.Text" xml:space="preserve">
    <value>ArticleEditor</value>
  </data>
  <data name="ArticleRejected.Text" xml:space="preserve">
    <value>Your article [EasyDNNnews:ArticleTitle] has been rejected.</value>
  </data>
  <data name="ArticleRejectedMessage.Text" xml:space="preserve">
    <value>Message: </value>
  </data>
  <data name="ArticleUnApprovedBody.Text" xml:space="preserve">
    <value>&lt;p&gt;Your article &lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;[EasyDNNnews:ArticleTitle]&lt;/a&gt; has been unapproved.&lt;/p&gt;</value>
  </data>
  <data name="ArticleUnApprovedRejected.Text" xml:space="preserve">
    <value>Your article  [EasyDNNnews:ArticleTitle] has be unapproved and rejected.</value>
  </data>
  <data name="ArticleUnApprovedSubject.Text" xml:space="preserve">
    <value>Your article has been unapproved.</value>
  </data>
  <data name="Categoryeditor.Text" xml:space="preserve">
    <value>Category editor</value>
  </data>
  <data name="CommentApprovedBody.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;Link to article&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="CommentApprovedSubject.Text" xml:space="preserve">
    <value>Your comment has been approved.</value>
  </data>
  <data name="CommentsClosed.Text" xml:space="preserve">
    <value>&lt;h1 class="num_of_comment"&gt;Comments are closed.&lt;/h1&gt;</value>
  </data>
  <data name="CommentsLoginRegister.Text" xml:space="preserve">
    <value>&lt;h1 class="num_of_comment"&gt;Please &lt;a href="[EasyDNNnews:LoginUrl]"&gt;login&lt;/a&gt; or &lt;a href="[EasyDNNnews:RegistrationUrl]"&gt;register&lt;/a&gt; to post comments.&lt;/h1&gt;</value>
  </data>
  <data name="CommentsNoPermission.Text" xml:space="preserve">
    <value>&lt;h1 class="num_of_comment"&gt;You don't have permission to post comments.&lt;/h1&gt;</value>
  </data>
  <data name="CommentsOnlyPaid.Text" xml:space="preserve">
    <value>&lt;h1 class="num_of_comment"&gt;Comments are only visible to subscribers.&lt;/h1&gt;</value>
  </data>
  <data name="Dashboard.Text" xml:space="preserve">
    <value>Dasboard</value>
  </data>
  <data name="EditArticleBody.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;Link to article&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="EditArticleSubject.Text" xml:space="preserve">
    <value>Article updated - [EasyDNNnews:ArticleTitle]</value>
  </data>
  <data name="EditEventBody.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;Link to event&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="EditEventSubject.Text" xml:space="preserve">
    <value>Event updated - [EasyDNNnews:ArticleTitle]</value>
  </data>
  <data name="NewArticleBody.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;Link to article&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="NewArticleSubject.Text" xml:space="preserve">
    <value>New article added [EasyDNNnews:ArticleTitle]</value>
  </data>
  <data name="NewCommentBody.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;Link to article&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="NewCommentSubject.Text" xml:space="preserve">
    <value>New comment added on article [EasyDNNnews:ArticleTitle]</value>
  </data>
  <data name="NewEventBody.Text" xml:space="preserve">
    <value>&lt;p&gt;&lt;a href="[EasyDNNnews:ArticleLink]" target="_blank"&gt;Link to event&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="NewEventSubject.Text" xml:space="preserve">
    <value>New event added - [EasyDNNnews:ArticleTitle]</value>
  </data>
  <data name="Summary.Text" xml:space="preserve">
    <value>Summary: </value>
  </data>
  <data name="Close.Text" xml:space="preserve">
    <value>Close</value>
  </data>
</root>