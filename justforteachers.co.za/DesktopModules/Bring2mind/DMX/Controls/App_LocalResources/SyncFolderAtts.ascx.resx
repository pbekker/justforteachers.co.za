<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdminLocked.Text" xml:space="preserve">
    <value>The path is outside the portal directory. You don't have permission to change this. Contact the host to change this binding.</value>
  </data>
  <data name="InvalidPath.Error" xml:space="preserve">
    <value>This path is invalid. Please use a path that starts with '{0}'</value>
  </data>
  <data name="lblAdminOnly.Text" xml:space="preserve">
    <value>These parameters can only be adjusted by administrators</value>
  </data>
  <data name="lblWarning.Text" xml:space="preserve">
    <value>WARNING: &lt;b&gt;Synchronization does not scale well&lt;/b&gt;. The time it takes to synchronize depends on the amount of files to check, the time it takes the server to retrieve a file from the source location (network latency) and the server's performance. Using this on very large repositories can lead to unexpected results. &lt;b&gt;Use sparingly&lt;/b&gt;. Import scales better as it does not need to compare files and (because it deletes the source file) it has less files to run through. Only use synchronization (Copy both ways/DMX leading/Source leading) if you have to.</value>
  </data>
  <data name="optCopyBothWays.Text" xml:space="preserve">
    <value>Copy both ways</value>
  </data>
  <data name="optDMXLeading.Text" xml:space="preserve">
    <value>DMX folder is leading</value>
  </data>
  <data name="optExport.Text" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="optImport.Text" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="optNoResolution.Text" xml:space="preserve">
    <value>No Resolution</value>
  </data>
  <data name="optSourceLeading.Text" xml:space="preserve">
    <value>Source folder is leading</value>
  </data>
  <data name="plConflict.Help" xml:space="preserve">
    <value>In case (1) both source and DMX copies of the document have been changed since last synchronization or (2) there are items not present in one or the other, specify what should happen:&lt;br/&gt;
&lt;ul&gt;
 &lt;li&gt;Import: Copy item over from source to DMX and delete from source if possible (only examines items in source)&lt;/li&gt;
 &lt;li&gt;Export: Copy item over from DMX to source and (hard) delete from DMX if possible (only examines items in DMX)&lt;/li&gt;
 &lt;li&gt;Copy both ways: Copies (new/changed) items from DMX to source and vice versa. Skips over items that were changed on both.&lt;/li&gt;
 &lt;li&gt;DMX folder is leading: Copies (new/changed) items from DMX to source. Overwrites any changes in source.&lt;/li&gt;
 &lt;li&gt;Source folder is leading: Copies (new/changed) items from source to DMX. Overwrites any changes in DMX.&lt;/li&gt;
 &lt;li&gt;No Resolution: Do nothing if item is found on both source and DMX, copy if otherwise.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="plConflict.Text" xml:space="preserve">
    <value>Conflict Resolution</value>
  </data>
  <data name="plSyncPath.Help" xml:space="preserve">
    <value>Specify (UNC) path to folder that this folder is syncronized with. NOTE: the identity the asp.net worker runs under (default NETWORK SERVICE) must have (full) access to this path. Further note: the NETWORK SERVICE account in Windows is a LOCAL account and is not recognized on another server without special provisions.</value>
  </data>
  <data name="plSyncPath.Text" xml:space="preserve">
    <value>Sync Path</value>
  </data>
</root>