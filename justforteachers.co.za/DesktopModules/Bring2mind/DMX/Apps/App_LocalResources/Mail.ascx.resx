<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="cmdSend.Text" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="ControlTitle.Text" xml:space="preserve">
    <value>Mail Document(s)</value>
  </data>
  <data name="dshEmail.Text" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="dshOptions.Text" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="dshSendTo.Text" xml:space="preserve">
    <value>Recipients</value>
  </data>
  <data name="dshSendWhat.Text" xml:space="preserve">
    <value>Sending</value>
  </data>
  <data name="optAttachment.Text" xml:space="preserve">
    <value>Attachment</value>
  </data>
  <data name="optLink.Text" xml:space="preserve">
    <value>Link</value>
  </data>
  <data name="plAvailability.Help" xml:space="preserve">
    <value>Select until when the link will remain active for the recipient to use</value>
  </data>
  <data name="plAvailability.Text" xml:space="preserve">
    <value>Availability</value>
  </data>
  <data name="plBody.Help" xml:space="preserve">
    <value>Body of the email. Note you may use standard DotNetNuke tokens like [user:firstname] but note that if you're using custom email addresses to send to (i.e. free format) then no user is known and user tokens will be blank.</value>
  </data>
  <data name="plBody.Text" xml:space="preserve">
    <value>Body</value>
  </data>
  <data name="plCCMe.Help" xml:space="preserve">
    <value>Send a copy of the email to my own email address</value>
  </data>
  <data name="plCCMe.Text" xml:space="preserve">
    <value>CC me</value>
  </data>
  <data name="plDocumentList.Help" xml:space="preserve">
    <value>List of documents stored in DMX that you selected for sending to the addressee</value>
  </data>
  <data name="plDocumentList.Text" xml:space="preserve">
    <value>Document List</value>
  </data>
  <data name="plDownloads.Help" xml:space="preserve">
    <value>Select the maximum nr of downloads that a recipient can get per document</value>
  </data>
  <data name="plDownloads.Text" xml:space="preserve">
    <value>Downloads</value>
  </data>
  <data name="plSendMethod.Help" xml:space="preserve">
    <value>Select the way you'd like to send these documents. As attachment means recipients get a (large) email with the actual documents attached. As link means recipients get links added to the bottom of the email which permits them to download the document directly from DMX bypassing any security.</value>
  </data>
  <data name="plSendMethod.Text" xml:space="preserve">
    <value>Method</value>
  </data>
  <data name="plSendTo.Help" xml:space="preserve">
    <value>Select who to send the email to. Optionally you can select user accounts from this site or security roles.</value>
  </data>
  <data name="plSendTo.Text" xml:space="preserve">
    <value>Send to</value>
  </data>
  <data name="plSubject.Help" xml:space="preserve">
    <value>Email subject line</value>
  </data>
  <data name="plSubject.Text" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="ToTabFree.Text" xml:space="preserve">
    <value>Addresses</value>
  </data>
  <data name="ToTabRoles.Text" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="ToTabUsers.Text" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="WholeNumber.Error" xml:space="preserve">
    <value>Not a valid whole number!</value>
  </data>
  <data name="cmdAddUser.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="cmdRemoveUser.Text" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="lblUsername.Text" xml:space="preserve">
    <value>Username:</value>
  </data>
  <data name="NoDocs.Text" xml:space="preserve">
    <value>No valid documents to send were found</value>
  </data>
  <data name="NoMethod.Text" xml:space="preserve">
    <value>No send method has been selected by the administrator. Please contact your administrator to have this changed.</value>
  </data>
  <data name="NoPermission.Text" xml:space="preserve">
    <value>You have no permission to send emails with this system. Please check your login status and/or contact your administrator.</value>
  </data>
  <data name="NoPortalAdmin.Text" xml:space="preserve">
    <value>No portal administrator was found to use as sender</value>
  </data>
  <data name="Required.Error" xml:space="preserve">
    <value>Required!</value>
  </data>
  <data name="UserNotFound.Text" xml:space="preserve">
    <value>User {0} not found. Note you should use usernames.</value>
  </data>
  <data name="plReplaceTokens.Help" xml:space="preserve">
    <value>When checked tokens such as [user:firstname] will be replaced with their respective values. Note that user specific information can not be replaced for freeform email address addressees. Only for those addressees selected under users and roles.</value>
  </data>
  <data name="plReplaceTokens.Text" xml:space="preserve">
    <value>Replace Tokens</value>
  </data>
</root>