<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdReturn.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="ControlTitle_gethelp.Text" xml:space="preserve">
    <value>Get Help for Document Exchange</value>
  </data>
  <data name="lblCreateHostAccount.Text" xml:space="preserve">
    <value>You can optionally create a host account for the Bring2mind support staff so they may remotely access your DNN installation. Note this is &lt;b&gt;not compulsory&lt;/b&gt;. Also, if your installation is not connected to the internet it is not possible for us to use this feature so you can skip this as well. If you opt to create a host account for us, it will be created as "host_bring2mind" on your installation. A password will be generated, encrypted using our own key and sent to us so only we can decode this. We have done everything within our means to make this as safe as possible. Note this mechanism is a lot safer then sending us your own host login details!</value>
  </data>
  <data name="lblLicenseExpired.Error" xml:space="preserve">
    <value>Your support contract with us has expired. Please renew your license so you may benefit from support again.</value>
  </data>
  <data name="lblNotActivated.Error" xml:space="preserve">
    <value>The Document Exchange has not been activated. Please activate it first. Note support is only available for licensed versions of Document Exchange.</value>
  </data>
  <data name="lblSend.Text" xml:space="preserve">
    <value>An email will be sent to Bring2mind support with relevant details. For this DotNetNuke's send email function is used. Make sure you have set up the SMTP parameters correctly so the messages can be sent. Note that below you can check what is being included in the message and you can specify the return email address to contact you about this.</value>
  </data>
  <data name="lblStep1.Text" xml:space="preserve">
    <value>Step 1. Describe Problem</value>
  </data>
  <data name="lblStep2.Text" xml:space="preserve">
    <value>Step 2. Select Items to Include</value>
  </data>
  <data name="lblStep3.Text" xml:space="preserve">
    <value>Step 3. Create Host Account for Remote Support</value>
  </data>
  <data name="lblStep4.Text" xml:space="preserve">
    <value>Step 4. Send</value>
  </data>
  <data name="lblTrialLicense.Error" xml:space="preserve">
    <value>This is a trial license. To get support please go to the forums on Bring2mind and post your questions there. Once you have a valid license you can contact us directly using this screen.</value>
  </data>
  <data name="plBody.Help" xml:space="preserve">
    <value>This text will be sent as the body of the email</value>
  </data>
  <data name="plBody.Text" xml:space="preserve">
    <value>Problem Description</value>
  </data>
  <data name="plCreateHost.Help" xml:space="preserve">
    <value>Create a host account for Bring2mind support team</value>
  </data>
  <data name="plCreateHost.Text" xml:space="preserve">
    <value>Create Host Account</value>
  </data>
  <data name="plEventLog.Help" xml:space="preserve">
    <value>Latest entries from the event log</value>
  </data>
  <data name="plEventLog.Text" xml:space="preserve">
    <value>Event Log</value>
  </data>
  <data name="plEventsEnd.Help" xml:space="preserve">
    <value>Include items from event log until this moment</value>
  </data>
  <data name="plEventsEnd.Text" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="plEventsOnlyBring2mind.Help" xml:space="preserve">
    <value>Send only events that have "bring2mind" in the error stack trace (i.e. were created by bring2mind code)</value>
  </data>
  <data name="plEventsOnlyBring2mind.Text" xml:space="preserve">
    <value>Only Bring2mind</value>
  </data>
  <data name="plEventsStart.Help" xml:space="preserve">
    <value>Start including event log from this moment</value>
  </data>
  <data name="plEventsStart.Text" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="plFileSystem.Help" xml:space="preserve">
    <value>Information about the file system and a rundown of installed dlls.</value>
  </data>
  <data name="plFileSystem.Text" xml:space="preserve">
    <value>File System</value>
  </data>
  <data name="plGenUsageInfo.Help" xml:space="preserve">
    <value>General statistics on usage like nr of portals, modules, users, sql table sizes, etc</value>
  </data>
  <data name="plGenUsageInfo.Text" xml:space="preserve">
    <value>General Usage Info</value>
  </data>
  <data name="plHostInfo.Help" xml:space="preserve">
    <value>Host settings, installed modules, schedule</value>
  </data>
  <data name="plHostInfo.Text" xml:space="preserve">
    <value>Host Info</value>
  </data>
  <data name="plHostTimeout.Help" xml:space="preserve">
    <value>The host account will be deactivated on this date. Note it will not be deleted, but merely switched off so no one can log in using that account any longer.</value>
  </data>
  <data name="plHostTimeout.Text" xml:space="preserve">
    <value>Expires</value>
  </data>
  <data name="plNrEvents.Help" xml:space="preserve">
    <value>Maximum number of events to include</value>
  </data>
  <data name="plNrEvents.Text" xml:space="preserve">
    <value>Max nr of events</value>
  </data>
  <data name="plServerInfo.Help" xml:space="preserve">
    <value>Information about the OS and DB of this installation</value>
  </data>
  <data name="plServerInfo.Text" xml:space="preserve">
    <value>Server Info</value>
  </data>
  <data name="plWebConfig.Help" xml:space="preserve">
    <value>Config files like the web.config. Note care is taken to remove any sensitive information like connection strings.</value>
  </data>
  <data name="plWebConfig.Text" xml:space="preserve">
    <value>Config Files</value>
  </data>
  <data name="plReturnEmail.Help" xml:space="preserve">
    <value>Email address where we can reach you</value>
  </data>
  <data name="plReturnEmail.Text" xml:space="preserve">
    <value>Return Email</value>
  </data>
  <data name="plSend.Help" xml:space="preserve">
    <value>Send the email (you will get a cc of this)</value>
  </data>
  <data name="plSend.Text" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="plViewInfo.Help" xml:space="preserve">
    <value>Downloads file with details that will be sent to Bring2mind</value>
  </data>
  <data name="plViewInfo.Text" xml:space="preserve">
    <value>View Info</value>
  </data>
  <data name="cmdSend.Text" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="cmdView.Text" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="plUrl.Help" xml:space="preserve">
    <value>Url where we can find this site</value>
  </data>
  <data name="plUrl.Text" xml:space="preserve">
    <value>Url</value>
  </data>
</root>