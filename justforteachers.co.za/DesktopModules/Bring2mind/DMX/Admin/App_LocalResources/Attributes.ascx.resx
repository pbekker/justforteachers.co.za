<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdReturn.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="plName.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="plName.Help" xml:space="preserve">
    <value>Name to be displayed for this attribute</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>Choose what kind of data type is stored in this attribute</value>
  </data>
  <data name="plAppliesTo.Text" xml:space="preserve">
    <value>Applies To</value>
  </data>
  <data name="plAppliesTo.Help" xml:space="preserve">
    <value>If this attribute applies to a specific type you can specify a semicolon delimited list here. Else leave blank.</value>
  </data>
  <data name="cmdAdd.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="ControlTitle_attributes.Text" xml:space="preserve">
    <value>Custom Attributes</value>
  </data>
  <data name="plValues.Text" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="plValues.Help" xml:space="preserve">
    <value>For the selection type you can specify a semicolon separated list of values. For a 'String' type you can specify a regular expression.</value>
  </data>
  <data name="plRequired.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="plRequired.Help" xml:space="preserve">
    <value>If the attribute is required the user may not upload/edit an entry without specifying the attribute value</value>
  </data>
  <data name="chkRequired.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="plResourceFile.Text" xml:space="preserve">
    <value>Resource File</value>
  </data>
  <data name="plResourceFile.Help" xml:space="preserve">
    <value>Resource file where the description and explanation for this attribute may be found</value>
  </data>
  <data name="plControlToLoad.Text" xml:space="preserve">
    <value>Control To Load</value>
  </data>
  <data name="plControlToLoad.Help" xml:space="preserve">
    <value>Ascx file to load into the edit screen to edit this attribute. Leave blank to use default editing controls.</value>
  </data>
  <data name="optString.Text" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="optInteger.Text" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="optDouble.Text" xml:space="preserve">
    <value>Floating Point</value>
  </data>
  <data name="optDate.Text" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="optSelect.Text" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="ControlToLoad.Heading" xml:space="preserve">
    <value>Control To Load</value>
  </data>
  <data name="EntryTypes.Heading" xml:space="preserve">
    <value>Entry Types</value>
  </data>
  <data name="Name.Heading" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Required.Heading" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="ResourceFile.Heading" xml:space="preserve">
    <value>Resource File</value>
  </data>
  <data name="Values.Heading" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="ValueType.Heading" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="EditAttribute.Text" xml:space="preserve">
    <value>Edit Attribute</value>
  </data>
  <data name="revName.Error" xml:space="preserve">
    <value>Please use only alphanumeric characters</value>
  </data>
  <data name="reqName.Error" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="lblRequired.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="lblValueType.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="optCustom.Text" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="plInherit.Help" xml:space="preserve">
    <value>The attributes are inherited from the parent folder. If deselected the attributes will be copied here and you can change them. Note: THIS ACTION CANNOT BE UNDONE!</value>
  </data>
  <data name="plInherit.Text" xml:space="preserve">
    <value>Inherit Attributes</value>
  </data>
  <data name="RemoveInherit.Confirm" xml:space="preserve">
    <value>Are you sure you want to remove inheritance? This cannot be undone!</value>
  </data>
  <data name="ScopeAll.Text" xml:space="preserve">
    <value>All Portal Attributes</value>
  </data>
  <data name="ScopeCollection.Text" xml:space="preserve">
    <value>Attributes for {0}</value>
  </data>
  <data name="lblInherited.Text" xml:space="preserve">
    <value>Inherited</value>
  </data>
  <data name="optBoolean.Text" xml:space="preserve">
    <value>Boolean</value>
  </data>
  <data name="lblKey.Text" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="Delete.Confirm" xml:space="preserve">
    <value>Are you sure you wish to delete this attribute?</value>
  </data>
</root>